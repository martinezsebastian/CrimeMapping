} else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if (0 < r < 44){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
} else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if (0 < r < 44){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
} else{
print("Judge does not exist")
}
}
weighted_index(100)
weighted_index <- function(r){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
weighted_index(1)
weighted_index(1:43) #for all Judges
weighted_index(44)
weighted_index <- function(r){
if (0 < r < 44){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
} else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(0 < r < 44){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
} else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(0 < r < 44){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(1 <= r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
print("The average rating for Judge:")
row.names(USJudgeRatings[w,])
print("is:")
USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
print("This average was created using the variables, with the following weights:")
print("Judicial Integrity")
print("Preparation for trial")
print("Sound Oral Rulings")
print("Physical Ability")
} else {
print("Weights do not add up")
}
weighted_index <- function(r){
if(1 <= r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(1 <= r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else {
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(1 <= r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted <- function(r){
if(1 <= r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
data("USJudgeRatings")
weighted_index <- function(r){
if(1 <= r){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(1 <= r and r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index <- function(r){
if(1 <= r && r <= 43){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(44)
weighted_index(23)
weighted_index(0)
weighted_index(4,5)
weighted_index(4.5)
weighted_index <- function(r){
if(1 <= r && r <= 43 && lenght==0){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(2.5)
weighted_index <- function(r){
if(1 <= r && r <= 43 && length(r)==0){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(2.5)
weighted_index(2)
weighted_index <- function(r){
if(1 <= r && r <= 43 && length(r)==1){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(2.5)
weighted_index <- function(r){
if(1 <= r && r <= 43 && length(r)==0L){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(2)
weighted_index <- function(r){
if(1 <= r && r <= 43 && !length(r)){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(2)
weighted_index(2.5)
weighted_index <- function(r){
if(1 <= r && r <= 43 && r == as.integer(r)){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(2.5)
weighted_index(2)
weighted_index(43)
weighted_index(44)
weighted_index <- function(r){
if(1 <= r && r <= 43 && r == as.integer(r)){
x1[r]*w1+x2[r]*w2+x3[r]*w3+x4[r]*w4
}
else{
print("Judge does not exist")
}
}
weighted_index(1)
weighted_index(1.5)
knitr
library()
install.packages("knitr")
judgerating <- USJudgeRatings
hist(judgerating)
Calculating the index for Judge `r print("[r]` in row 1 returns `r weighted_index(1)`
USJudgeRatings
View(judgerating)
View(judgerating)
weighted_index(1)
weighted_index(1:43) #for all Judges
Calculating the index for Judge `r print("USJudgeRatings[1,0]")` in row 1 returns `r weighted_index(1)`
mean(USJudgeRatings$INTG)
mean(USJudgeRatings$INTG,PREP)
mean(USJudgeRatings$INTG)
mean(USJudgeRatings$PREP)
mean(USJudgeRatings$ORAL)
mean(USJudgeRatings$PHYS)
hist(USJudgeRatings$INTG)
hist(USJudgeRatings$INTG)
hist(USJudgeRatings$PREP)
hist(USJudgeRatings$ORAL)
hist(USJudgeRatings$PHYS)
hist(USJudgeRatings$PHYS)
range(USJudgeRatings$INTG)
row.names(USJudgeRatings[0,1]
row.names(USJudgeRatings[0,1])
row.names("USJudgeRatings"[0,1])
USJudgeRatings[0,1]
USJudgeRatings[2,1]
USJudgeRatings[2,0]
USJudgeRatings[1,0]
USJudgeRatings[2,2]
USJudgeRatings[2,2]
row.names(1)
row.names(USJudgesRatings)
row.names(USJudgesRatings[1])
usjudges <- USJudgeRatings
row.names(usjudges)
row.names(usjudges[1])
row.names(usjudges[1,1])
row.names(usjudges[2,1])
usjudges <- USJudgeRatings
row.names(usjudges)
usjudges <- USJudgeRatings
names <- row.names(usjudges)
x1 <- USJudgeRatings$INTG
IndexResults <- data.frame(names, x1)
View(IndexResults)
View(IndexResults)
View(IndexResults)
IndexResults
.Library
install.packages("maptools", "gpclip", "ggplot2", "RColorBrewer", "rgdal", "mapproj")
.libPaths("C:\Users\Fabian\Documents\R\win-library\3.2")
.libPaths("C:/Users/Fabian/Documents/R/win-library/3.2")
install.packages("maptools", "gpclip", "ggplot2", "RColorBrewer", "rgdal", "mapproj")
install.packages("gpclip")
install.packages("rgdal", lib="C:/Users/Fabian/Documents/R/win-library/3.2")
install. packages("mapproj")
install.packages("mapproj")
install.packages("maptools", "gpclip", "ggplot2", "RColorBrewer", "rgdal", "mapproj")
install.packages("maptools")
install.packages("gpclip")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("rgdal")
install.packages("mapproj")
library(maptools)
library(gpclib)
library(ggplot2)
library(RColorBrewer)
library(rgdal)
library(mapproj)
source('/RpackagesInstall')
install.packages("maptools")
install.packages("gpclip")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("rgdal")
install.packages("mapproj")
library(maptools)
library(gpclib)
library(ggplot2)
library(RColorBrewer)
library(rgdal)
library(mapproj)
install.packages("gpclip")
library(RColorBrewer)
install.packages(c("brew", "countrycode",
"devtools", "dplyr",
"ggplot2", "googleVis",
"knitr", "MCMCpack",
"repmis", "RCurl",
"rmarkdown", "texreg",
"tidyr", "WDI",
"xtable", "Zelig"))
install.packages("RSocrata"")
install.packages("RSocrata")
install.packages("RSocrata")
read.socrata("https://data.cityofchicago.org/Public-Safety/Police-Stations/z8bn-74gv")
read.socrata("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
x <- read.socrata("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
library("RSocrata")
x <- read.socrata("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
install.packages("rio")
crime <- import("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
library("rio")
crime <- import("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
View(crime)
View(crime)
library("RSocrata")
x <-  read.socrata("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
install.packages("httr")
install.packages("httr")
install.packages("dplyr")
install.packages("XML")
install.packages("stringr")
URL <- http://www.bbc.com/sport/winter-olympics/2014/medals/countries
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
install.packages("dplyr")
lib(dplyr)
lib(httr)
lib(XML)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
"medals-table-by-sport__countries_table"
library(dplyr)
library(httr)
library(XML)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
"medals-table-by-sport__countries_table"
tables
data <- as.data.frame(tables)
sort(data, v6)
descending <- arrange(data, desc("V6")
descending <- arrange(data, desc("V6")
descending <- arrange(data, desc(V6))
descending <- arrange(tables, desc(V6))
descending <- arrange(data, desc(data[6])
descending <- arrange(data, desc(data[6])
class(data)
descending <- arrange(data, desc(V6))
descending <- arrange(data, desc(V6))
descending <- arrange(data, desc(v6))
class(data$v6)
class(data$V6)
data <- as.data.frame(tables)
class(data$V6)
class(data$V6)
class(data$NULL.V6)
descending <- arrange(data, desc(NULL.v6))
descending <- arrange(data, desc(NULL.V6))
descending <- arrange(data, desc(NULL.V6))
descending <- arrange(data, desc(NULL.V6))
class(data$NULL.V6)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
data <- as.data.frame(tables)
class(data)
class(data$NULL.V6)
descending <- arrange(data, desc(NULL.V6))
descending
class(data$NULL.V6)
descending <- arrange(data, desc(as.numeric(data&NULL.V6)))
descending <- arrange(data, desc(as.numeric(data$NULL.V6)))
descending
descending <- arrange(data, desc(as.numeric(as.character(data$NULL.V6))))
descending
names(data) <- c('country', 'gold', 'silver', 'bronze', 'total')
descending <- arrange(data, desc(as.numeric(as.character(data$total))))
descending
descending <- arrange(data, desc(as.numeric(as.character(data$NULL.V6))))
library(dplyr)
library(httr)
library(XML)
## getting table "medals-table-by-sport__countries_table"
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>% content(as = 'parsed') %>% readHTMLTable()
names(tables)
data <- as.data.frame(tables)
class(data)
class(data$NULL.V6)
descending <- arrange(data, desc(as.numeric(as.character(data$NULL.V6))))
descending
M1 <- (Prestige ~ Education, data = Prestige)
M1 <- (prestige ~ education, data = Prestige)
M1 <- (prestige ~ education data = Prestige)
M1 <- (prestige ~ education, lm, data = Prestige)
M1 <- lm(prestige ~ education, data = Prestige)
library("rio")
crime <- import("https://data.cityofchicago.org/resource/qjr3-bm53.json")
View(crime)
View(crime)
Census <- import("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
View(Census)
View(Census)
hist(Census, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
curve(dnorm(x, mean=mean(Murders), sd=sd(Murders)), add=TRUE, col="darkblue", lwd=2)
hist(Census, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
View(Census)
View(Census)
hist(hardship_index, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
hist(ca, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
hist(ca, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
hist(hardship_index, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
Census2 <- read.socrata("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
library("RSocrata")
Census2 <- read.socrata("https://data.cityofchicago.org/resource/vwwp-7yr9.json")
Census2 <- read.socrata("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
Census1 <- read.socrata("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
Census1 <- read.socrata("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
library("RSocrata")
install.packages("RSocrata")
install.packages("RSocrata")
library("RSocrata")
Census1 <- read.socrata("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
hist(hardship_index , freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
PerCapitaIncome <- Census$per_capita_income_
hist(PerCapitaIncome, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
hist(PerCapitaIncome, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
PerCapitaIncome <- as.numeric(Census$per_capita_income_)
hist(PerCapitaIncome, freq=FALSE, main = "Histogram of Arrests of Murders per 100,000 residents")
Census2 <- import("https://data.cityofchicago.org/resource/kn9c-c2s2.json", stringsAsFactors=FALSE)
hist(PerCapitaIncome, freq=FALSE, main = "header")
hist(PerCapitaIncome, freq=TRUE, main = "header")
hist(ac_)
hist(ca_)
hist(PerCapitaIncome, freq=TRUE, main = "header")
curve(dnorm(x, mean=mean(PerCapitaIncome), sd=sd(PerCapitaIncome)), add=TRUE, col="darkblue", lwd=2)
hist(PerCapitaIncome, freq=FALSE, main = "header")
curve(dnorm(x, mean=mean(PerCapitaIncome), sd=sd(PerCapitaIncome)), add=TRUE, col="darkblue", lwd=2)
hist(PerCapitaIncome, freq=FALSE, main = "header")
curve(dnorm(x, mean=mean(PerCapitaIncome), sd=sd(PerCapitaIncome)), add=TRUE, col="darkblue", lwd=2)
hist(PerCapitaIncome, freq=TRUE, main = "header")
curve(dnorm(x, mean=mean(PerCapitaIncome), sd=sd(PerCapitaIncome)), add=TRUE, col="darkblue", lwd=2)
Census <- import("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
PerCapitaIncome <- as.numeric(Census$per_capita_income_)
Census <- import("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
library("rio")
library("rio")
Census <- import("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
PerCapitaIncome <- as.numeric(Census$per_capita_income_)
Census <- import("https://data.cityofchicago.org/resource/kn9c-c2s2.json")
View(Census)
hist(hardship_index)
hist(Census$hardship_index)
hist(as.numeric(Census$hardship_index))
source('~/.active-rstudio-document', echo=TRUE)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(money) + as.factor(property), family=binomial(link="probit"), data=Crime_Data)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(money) + as.factor(property), family=binomial(link="probit"), data=Crime_Data)
summary(probit2)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.factor(money), family=binomial(link="probit"), data=Crime_Data)
summary(probit2)
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_), percent_aged_16_unemployed==mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
x
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_), percent_aged_16_unemployed==mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.factor(money), family=binomial(link="probit"), data=Crime_Data)
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
fitted$predicted <- predict(probit2, newdata = fitted, type = 'response', interval='confidence')
kable(fitted)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.factor(money), family=binomial(link="probit"), data=Crime_Data)
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
fitted$predicted <- predict(probit2, newdata = fitted, type = 'response', interval='confidence')
kable(fitted)
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), data.frame(percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed))), money = factor(0:1))
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
fitted$predicted <- predict(probit2, newdata = fitted, type = 'response', interval='confidence')
kable(fitted)
fitted <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), money = factor(0:1)))
fitted$predicted <- predict(probit2, newdata = fitted, type = 'response', interval='confidence')
kable(fitted)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(money) + as.factor(property) + as.factor(violent), family=binomial(link="probit"), data=Crime_Data)
fitted2 <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), percent_households_below_poverty=mean(as.integer(percent_households_below_poverty)), percent_aged_25_without_high_school_diploma=mean(as.integer(percent_aged_25_without_high_school_diploma)), percent_of_housing_crowded=mean(as.integer(percent_of_housing_crowded)), percent_aged_under_18_or_over_64=mean(as.integer(percent_aged_under_18_or_over_64)), money = factor(0:1), property =factor(0:1), violent = factor(0:1)))
fitted2$predicted <- predict(probit2, newdata = fitted2, type = 'response', interval='confidence')
kable(fitted2)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(money) + as.factor(property) + as.factor(violent), family=binomial(link="probit"), data=Crime_Data)
fitted2 <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), percent_households_below_poverty=mean(as.integer(percent_households_below_poverty)), percent_aged_25_without_high_school_diploma=mean(as.integer(percent_aged_25_without_high_school_diploma)), percent_of_housing_crowded=mean(as.integer(percent_of_housing_crowded)), percent_aged_under_18_or_over_64=mean(as.integer(percent_aged_under_18_or_over_64)), money = factor(0:1), property =factor(0:1), violent = factor(0:1)))
fitted2$predicted <- predict(probit2, newdata = fitted2, type = 'response', interval='confidence')
kable(fitted2)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(money) + as.factor(property) + as.factor(violent), family=binomial(link="probit"), data=Crime_Data)
fitted2 <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), percent_households_below_poverty=mean(as.integer(percent_households_below_poverty)), percent_aged_25_without_high_school_diploma=mean(as.integer(percent_aged_25_without_high_school_diploma)), percent_of_housing_crowded=mean(as.integer(percent_of_housing_crowded)), percent_aged_under_18_or_over_64=mean(as.integer(percent_aged_under_18_or_over_64)), money = factor(0:1), violent = factor(0:1)))
fitted2$predicted <- predict(probit2, newdata = fitted2, type = 'response', interval='confidence')
kable(fitted2)
fitted2 <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), percent_households_below_poverty=mean(as.integer(percent_households_below_poverty)), percent_aged_25_without_high_school_diploma=mean(as.integer(percent_aged_25_without_high_school_diploma)), percent_of_housing_crowded=mean(as.integer(percent_of_housing_crowded)), percent_aged_under_18_or_over_64=mean(as.integer(percent_aged_under_18_or_over_64)), violent = factor(0:1)))
fitted2$predicted <- predict(probit2, newdata = fitted2, type = 'response', interval='confidence')
kable(fitted2)
probit2 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(violent), family=binomial(link="probit"), data=Crime_Data)
fitted2 <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), percent_households_below_poverty=mean(as.integer(percent_households_below_poverty)), percent_aged_25_without_high_school_diploma=mean(as.integer(percent_aged_25_without_high_school_diploma)), percent_of_housing_crowded=mean(as.integer(percent_of_housing_crowded)), percent_aged_under_18_or_over_64=mean(as.integer(percent_aged_under_18_or_over_64)), violent = factor(0:1)))
fitted2$predicted <- predict(probit2, newdata = fitted2, type = 'response', interval='confidence')
kable(fitted2)
View(District15)
View(Crime_Data)
Crime_Data$Prostitution <- ifelse(Crime_Data$Primary.Type=="PROSTITUTION", 1,0)
Prostitution_probit3 <- glm(far ~ as.integer(per_capita_income_) + as.integer(percent_aged_16_unemployed) + as.integer(percent_households_below_poverty) + as.integer(percent_aged_25_without_high_school_diploma)+ as.integer(percent_of_housing_crowded) + as.integer(percent_aged_under_18_or_over_64) + as.factor(Prostitution), family=binomial(link="probit"), data=Crime_Data)
fitted3 <- with(Crime_Data, data.frame(per_capita_income_=mean(as.integer(per_capita_income_)), percent_aged_16_unemployed=mean(as.integer(percent_aged_16_unemployed)), percent_households_below_poverty=mean(as.integer(percent_households_below_poverty)), percent_aged_25_without_high_school_diploma=mean(as.integer(percent_aged_25_without_high_school_diploma)), percent_of_housing_crowded=mean(as.integer(percent_of_housing_crowded)), percent_aged_under_18_or_over_64=mean(as.integer(percent_aged_under_18_or_over_64)), Prostitution = factor(0:1)))
fitted3$predicted <- predict(Prostitution_probit3, newdata = fitted3, type = 'response', interval='confidence')
kable(fitted3)
install.packages("Stargazer")
install.packages("stargazer")
