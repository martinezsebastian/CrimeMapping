ggplot(mtcars, aes(hp, mpg)) + geom_point()
install.packages('ggplot2')
library(ggplot2)
ggplot(mtcars, aes(hp, mpg)) + geom_point()
mtcars[]
---
title: "Presentation"
author: "sebastianmartinez"
date: "September 25, 2015"
output: ioslides_presentation
---
## R Markdown
This is an R Markdown presentation. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document.
## Slide with Bullets
- Bullet 1
- Bullet 2
- Bullet 3
## Slide with R Code and Output
```{r}
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
print("The average rating for Judge:")
row.names(USJudgeRatings[w,])
print("is:")
USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
print("This average was created using the variables, with the following weights:")
print("Judicial Integrity")
print("Preparation for trial")
print("Sound Oral Rulings")
print("Physical Ability")
} else {
print("Weights do not add up")
}
}
x_1 <- 0.1
x_2 <- 0.4
x_3 <- 0.4
x_4 <- 0.1
weighted(1,x_1,x_2,x_3,x_4)
```
## Slide with Plot
```{r, echo=FALSE}
plot(cars)
```
---
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
judgename <- row.names(USJudgeRatings[w,])
#    print(paste("The average rating for Judge:", row.names(USJudgeRatings[w,])))
output <- USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
#    print(paste("is:", output))
#    print("This average was created using the variables, with the following weights:")
#    print(paste("Judicial Integrity:", w1))
#    print(paste("Preparation for trial:", w2))
#    print(paste("Sound Oral Rulings:", w3))
#    print(paste("Physical Ability:", w4))
salida[1] <- judgename
salida[2] <- output
} else {
print("Weights do not add up")
}
}
x_1 <- 0.1
x_2 <- 0.4
x_3 <- 0.4
x_4 <- 0.1
output2 <- weighted(1,x_1,x_2,x_3,x_4)
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
judgename <- row.names(USJudgeRatings[w,])
#    print(paste("The average rating for Judge:", row.names(USJudgeRatings[w,])))
output <- USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
#    print(paste("is:", output))
#    print("This average was created using the variables, with the following weights:")
#    print(paste("Judicial Integrity:", w1))
#    print(paste("Preparation for trial:", w2))
#    print(paste("Sound Oral Rulings:", w3))
#    print(paste("Physical Ability:", w4))
salida[1] <- judgename
salida[2] <- output
} else {
print("Weights do not add up")
}
}
x_1 <- 0.1
x_2 <- 0.4
x_3 <- 0.4
x_4 <- 0.1
output2 <- weighted(1,x_1,x_2,x_3,x_4)
output = list(judgename, rating)
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
judgename <- row.names(USJudgeRatings[w,])
#    print(paste("The average rating for Judge:", row.names(USJudgeRatings[w,])))
rating <- USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
#    print(paste("is:", output))
#    print("This average was created using the variables, with the following weights:")
#    print(paste("Judicial Integrity:", w1))
#    print(paste("Preparation for trial:", w2))
#    print(paste("Sound Oral Rulings:", w3))
#    print(paste("Physical Ability:", w4))
output = list(judgename, rating)
} else {
print("Weights do not add up")
}
}
x_1 <- 0.1
x_2 <- 0.4
x_3 <- 0.4
x_4 <- 0.1
output2 <- weighted(1,x_1,x_2,x_3,x_4)
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
judgename <- row.names(USJudgeRatings[w,])
#    print(paste("The average rating for Judge:", row.names(USJudgeRatings[w,])))
rating <- USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
#    print(paste("is:", output))
#    print("This average was created using the variables, with the following weights:")
#    print(paste("Judicial Integrity:", w1))
#    print(paste("Preparation for trial:", w2))
#    print(paste("Sound Oral Rulings:", w3))
#    print(paste("Physical Ability:", w4))
output = list(judgename, rating)
} else {
print("Weights do not add up")
}
}
x_1 <- 0.1
x_2 <- 0.4
x_3 <- 0.4
x_4 <- 0.1
output2 <- weighted(1,x_1,x_2,x_3,x_4)
weighted <- function(w,w1,w2,w3,w4){
if(w1+w2+w3+w4==1){
judgename <- row.names(USJudgeRatings[w,])
#    print(paste("The average rating for Judge:", row.names(USJudgeRatings[w,])))
rating <- USJudgeRatings$INTG[w]*w1+USJudgeRatings$PREP[w]*w2+USJudgeRatings$ORAL[w]*w3+USJudgeRatings$PHYS[w]*w4
#    print(paste("is:", output))
#    print("This average was created using the variables, with the following weights:")
#    print(paste("Judicial Integrity:", w1))
#    print(paste("Preparation for trial:", w2))
#    print(paste("Sound Oral Rulings:", w3))
#    print(paste("Physical Ability:", w4))
output = list(judgename, rating)
} else {
print("Weights do not add up")
}
}
x_1 <- 0.1
x_2 <- 0.4
x_3 <- 0.4
x_4 <- 0.1
output2 <- weighted(1,x_1,x_2,x_3,x_4)
output2[1]
output2[]
############
# R-File 1 for Assignment 1 analyzing dataset 2 (HairEyeColor)
# Christopher Cosler and Lisa Schmid
# Updated September 30, 2015
# The results are used and described in the presentation slides of Assignment 1
# Formatted according to Google style guide
###########
#Load student hair and eyecolor data and pass it into a dataframe
data("HairEyeColor")
HairEyeColorData <- data.frame(HairEyeColor)
###########
# Descriptive statistics
###########
# Let's match the eye and hair color variables into one table, summing up all how often
# all possible combinations of hair and eye color exist in our data
x <- apply(HairEyeColor, c(1, 2), sum)
x #table of how eye and hair color variables are distributed
sum(x) #sum of individuals in the data frame
HairEyeColorTable <- data.frame(x) #we can turn the table into a data frame
#barplots
bb <- barplot(HairEyeColorTable$Brown,
main = "Distribution of eye color among persons with brown hair",
names.arg = c("brown", "pink", "blue", "hazel"),
ylab = "Absolute number of students")
text(bb,HairEyeColorTable[,1]-4,labels=HairEyeColorTable[1,],cex=.8)
# Mosaique Plot, filled with colors according to the eye color
fill_colors <- colors()[c(56,130,146,230)] #numbers represent different colors, see http://research.stowers-institute.org/efg/R/Color/Chart/
mosaicplot(x, main = "Relationship between hair and eye color",
color=fill_colors)
x
HairEyeColorData$Hair
HairEyeColorData$Eye
x[1]
install.packages("RSocrata
)
.
asdnasdmkla
sdads;'ads'
'adsnklSDKL:A
S"F'
ADS
install.packages("RSocrata")
source('~/.active-rstudio-document', echo=TRUE)
ls.socrata()
ls.socrata("https://soda.demo.socrata.com")
allSitesDataFrame <- ls.socrata("https://soda.demo.socrata.com")
allSitesDataFrame$title # Names of each dataset
install.packages("rio")
crime <- import("https://data.cityofchicago.org/resource/hx8q-mf9v.json")
library(rio)
crime <- import("https://data.cityofchicago.org/resource/hx8q-mf9v.json")
crime
View(crime)
x <- read.socrata("https://data.cityofchicago.org/resource/hx8q-mf9v.json")
library(foreign)
setwd("/Users/SebastianMartinez/Dropbox/0. Hertie/3/Collaborative Social Science Data Analysis/GitHub/CrimeMapping/R Source files/")
crimes <- read.csv("crimes_2015.csv")
View(crimes)
boundaries <- read.dbf("PoliceDistrict.dbf")
centroids <- read.csv("centroids.csv")
total <- merge(crimes, centroids, by.x = "district", by.y = "DIST_NUM")
total$y_dist <- total$ycoordinate - total$Y
total$x_dist <- total$xcoordinate - total$X
total$distance <- sqrt((total$x_dist)^2+(total$y_dist)^2)
total$count <- 1
aggtotal <- aggregate(distance ~ district*primarytype, data=total, FUN=mean)
aggtotal$number <- aggregate(count ~ district*primarytype, data=total, FUN=sum)
library(maptools)
library(ggmap)
library(ggplot2)
gpclibPermit()
area <- readShapePoly("PoliceDistrict.shp")
mapImage <- get_map(location = c(lon = -87.6, lat = 41.8), color = "color", source = "google", zoom = 10)
areapoints <- fortify(area)
head(area)
ggmap(mapImage) + geom_polygon(aes(x = long, y = lat, group = group), data = areapoints, alpha = 0.5) + labs(x = "Longitude", y = "Latitude")
